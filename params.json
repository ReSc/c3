{"name":"c3","tagline":"Common container collection a.k.a. c3 for go","body":"[![Build Status](https://travis-ci.org/ReSc/c3.png?branch=master)](https://travis-ci.org/ReSc/c3)\r\nc3\r\n==\r\n\r\nThe common container collection a.k.a. c3 for go 1.1.\r\n\r\n\r\nIntroduction\r\n============\r\n\r\nThis library provides a few basic container interfaces that are missing in Go\r\nin my humble opinion. The slice and map containers are nice, but they don't provide\r\nvery many convenience methods. This library aims to remedy that.\r\n\r\nThe code lives at http://github.com/ReSc/c3#c3\r\n\r\nYou can find the CI builds at http://travis-ci.org/ReSc/c3\r\n\r\nThe documentation can be found at http://godoc.org/github.com/ReSc/c3\r\n\r\nCode Quality\r\n============\r\n\r\nThis library has started its life in october 2013 and is still in beta.\r\n\r\nContributions And Bug Reports\r\n=============================\r\n\r\nSend pull requests! \r\n\r\nIf you have a bug to report I would be very grateful If\r\nyou could submit it as a pull request with a failing test.\r\n\r\n\r\nRoad Map\r\n========\r\n\r\nThe interfaces Bag, List, Set, Queue and Stack are complete and every \r\ninterface has an implementation.\r\nI don't plan on adding any more container interfaces for the v1 release. \r\nMaybe a SortedList and a generic Tree for v2...\r\n\r\nThere is work to be done in the tests and benchmarks of the implementations.\r\nThe query api could use some query operators, and there should be more convenience\r\nfunctions for creating and converting \r\nand in conversion from and to slices, maps and channels.\r\n\r\nContainers\r\n==========\r\n\r\n - Iterable: A container that provides a way to iterate over its elements\r\n - Bag: An unordered container.\r\n - List: An ordered, indexable container.\r\n - Set: An unordered container that does not allow duplicates, and provides a few basic set operations.\r\n - Stack: A Last-In First-Out container.\r\n - Queue: A First-In First-Out container.\r\n\r\nThread And Goroutine Safety\r\n===========================\r\n\r\nThese containers are _not_ goroutine- or thread safe.\r\n\r\nThere is a basic check for concurrent modification while iterating over a container\r\nso you'll at least know when things get corrupted because of concurrent modifications\r\nEvery mutation of a container increments the container version, and Iterator checks\r\nthis version on every MoveNext(), and panics if it is not what it expects.\r\n\r\nThis also means you cannot modify a container while iterating over it.\r\n\r\nExample:\r\n\r\n\t// Don't do this!\r\n\tl := c3.ListOf(1,2,3,4)\r\n\tfor i := l.Iterator(); i.MoveNext(); {\r\n\t\t// vv bug here, cannot modify container while iterating over it! vv\r\n\t\tl.Add(i.Value().(int)*2)\r\n\t}\r\n\r\nElement Types\r\n=============\r\n\r\nBecause Go does not have generics (yet..) I choose <code>interface{}</code> for the element type.\r\nThis means there will be casting involved with the use of the containers in c3\r\nbut Go's type assertions are nice enough to make it only a minor annoyance.\r\n\r\nQuering containers\r\n==================\r\n\r\nThe c3.NewQuery() function provides an entrypoint for the query api of c3.\r\nThis api is modelled after the C# Linq api.\r\n\r\nExample:\r\n\r\n\tl := c3.ListOf(1, 2, 3, 4)\r\n\tq := c3.NewQuery(l)\r\n\tresult := q.Where(func(e interface{})) { return e.(int)%2 == 0 }).\r\n\t            Select(func(e interface{}) interface{} { return e.(int) * 10 }).\r\n\t\t\t\tToList()\r\n\r\nAs you can see this api would be much nicer if Go had lambda expressions so that you could type\r\n\r\n    e => e.(int) * 10\r\n\t\r\ninstead of\r\n\r\n\tfunc(e interface{}) interface{} { return e.(int) * 10 }\r\n\t\r\nas an alternative you can define named functions to improve readability\r\n\r\nExample:\r\n\r\n\tfunc isMod2(e interface{}) bool {\r\n\t\treturn e.(int)%2 == 0\r\n\t} \r\n\t\r\n\tfunc times10(e interface{}) interface{} {\r\n\t\treturn e.(int)*10\r\n\t} \r\n\r\n\tl := c3.ListOf(1, 2, 3, 4)\r\n\tq := c3.NewQuery(l)\r\n\tresult := q.Where(isMod2).\r\n\t            Select(times10).\r\n\t\t\t\tToList()\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}